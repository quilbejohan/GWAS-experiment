Demultiplexing :
#!/bin/bash
#SBATCH --partition normal
#SBATCH --mem=100g
#SBATCH -c 40
#SBATCH --time=06:0:0
source ~/miniconda3/etc/profile.d/conda.sh
conda activate qiime2-2020.11
qiime tools import \
  --type 'SampleData[PairedEndSequencesWithQuality]' \
  --input-path manifest.txt \
  --output-path paired-end-demux.qza \
  --input-format PairedEndFastqManifestPhred33V2 \
qiime demux summarize \
  --i-data ./paired-end-demux.qza \
  --o-visualization ./paired-end-demux.qzv
conda deactivate


DADA2 table:
#!/bin/bash
#SBATCH --partition normal
#SBATCH --mem=100g
#SBATCH -c 40
#SBATCH --time=10:0:0
source ~/miniconda3/etc/profile.d/conda.sh
conda activate qiime2-2020.11
qiime dada2 denoise-paired \
  --i-demultiplexed-seqs ./paired-end-demux.qza \
  --p-trim-left-f 2 \
  --p-trunc-len-f 246 \
  --p-trim-left-r 2 \
  --p-trunc-len-r 245 \
  --p-max-ee-f 2 \
  --p-max-ee-r 2 \
  --p-n-threads 0 \
  --o-table ./dada2_table.qza \
  --o-representative-sequences ./dada2_repseqs.qza \
  --o-denoising-stats ./dada2_stats.qza
conda deactivate





Mannhattan plot and table :
ow2 = read.delim('LjRoot296rep3_output.csv',
                 sep = ',',
                 header = TRUE)
dfForMP = function(df) {
  df = df[!df$chromosomes %in% c(0, 7, 8), ]
  df = df[df$macs > 8, ]
  df = df[, c(1, 2, 3)]
  df$SNP = paste(df$chromosomes, df$positions, sep = '_')
  colnames(df)[c(1, 2, 3)] = c('CHR', 'BP', 'P')
  df = df[, c(4, 1, 2, 3)]
  return(df)
}
ow2 = dfForMP(ow2)
qq(ow2$P)
ow2$Padj = p.adjust(p = ow2$P, method = 'BH')
sig2 = ow2[ow2$P <= 1e-5, ]
sig2
png('C:/LjRoot296rep3.png', height = 4500, width = 8000, res = 1000)
MP(ow2[, 1:4],
   highlight = sig2$SNP,
   col = c('#332288', '#0066CC'),
   genomewideline = FALSE)
dev.off()


write.table(sig2, sep = '\t', file = 'sig_LjRoot296rep3.txt', row.names = FALSE, col.names = T, quote = FALSE)


From table to bedfile : 
bed = read.delim("sig_LjRoot296rep3.txt", sep = '\t', header = TRUE)
bed = bed[, c(2, 3, 4)]
bed$other_pos = bed$BP - 1
bed = bed[, c(1, 4, 2, 3)]
for(i in 1:length(bed$CHR)) {
  if(bed$CHR[i] == 1) {bed$CHR[i] = 'LjG1.1_chr1'}
  if(bed$CHR[i] == 2) {bed$CHR[i] = 'LjG1.1_chr2'}
  if(bed$CHR[i] == 3) {bed$CHR[i] = 'LjG1.1_chr3'}
  if(bed$CHR[i] == 4) {bed$CHR[i] = 'LjG1.1_chr4'}
  if(bed$CHR[i] == 5) {bed$CHR[i] = 'LjG1.1_chr5'}
  if(bed$CHR[i] == 6) {bed$CHR[i] = 'LjG1.1_chr6'}
}
write.table(bed, file="bedsig_LjRoot296rep3.txt",quote=FALSE,
            row.names=FALSE,col.names=FALSE,sep="\t")


